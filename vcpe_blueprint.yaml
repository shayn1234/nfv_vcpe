tosca_definitions_version: cloudify_dsl_1_3

imports:

  - https://drive.google.com/uc?export=download&id=0BwJk-m4PjvavUjZXQWRHQkhxaGM
  - http://www.getcloudify.org/spec/openstack-plugin/2.0/plugin.yaml
  - http://www.getcloudify.org/spec/diamond-plugin/1.3.3/plugin.yaml
  - http://www.getcloudify.org/spec/fabric-plugin/1.4.2/plugin.yaml
  - types/labs.yaml
  - types/openvpn.yaml

inputs:


  openstack_controller_queue_id:
    description: Controller Queue for OpenStack
    type: string
    default: 'cloudify.gC8AtYEJmd'

  use_existing_openstack_external_network:
    type: boolean
    default: true

  openstack_external_network_name:
    type: string
    default: external

  use_existing_openstack_network:
    type: boolean
    default: true

  openstack_network_name:
    type: string
    default: 'controller-network-name'

  openstack_group_name:
    default: 'controller-group'

  use_existing_openstack_network_subnet:
    type: boolean
    default: true

  openstack_network_subnet:
    type: string
    default: 'controller-network-subnet'

  use_existing_openstack_network_port:
    type: boolean
    default: false

  openstack_network_port:
    type: string
    default: 'example-network-port'

  use_existing_openstack_key:
    default: false

  openstack_key:
    default: openstack-key

  openstack_key_file:
    default: ~/.ssh/openstack-key.pem


  image_id:
    type: string
    default: '9fe5fd57-0b81-4c40-bdd8-366dc7ecf0c0'

  flavor_id:
    type: string
    default: '8f4b7ae1-b8c2-431f-bb0c-362a5ece0381'

  agent_user:
    type: string
    default: 'centos'

  def_security_group_name:
    type: string
    default: 'controller-group'

  filter_keyword:
    type: string
    default: 'gambling'

node_templates:

  openstack_controller:
    type: cloudify.nodes.Controller
    properties:
      controller_queue: { get_input: openstack_controller_queue_id }

  openstack_external_network:
    type: cloudify.openstack.nodes.Network
    properties:
      use_external_resource: { get_input: use_existing_openstack_external_network }
      resource_id: { get_input: openstack_external_network_name }
    relationships:
      - target: openstack_controller
        type: cloudify.relationships.connected_to

  openstack_network:
    type: cloudify.openstack.nodes.Network
    properties:
      use_external_resource: { get_input: use_existing_openstack_network }
      resource_id: { get_input: openstack_network_name }
    relationships:
      - target: openstack_controller
        type: cloudify.relationships.connected_to

  openstack_network_subnet:
    type: cloudify.openstack.nodes.Subnet
    properties:
      use_external_resource: { get_input: use_existing_openstack_network_subnet }
      resource_id: { get_input: openstack_network_subnet }
    relationships:
      - target: openstack_network
        type: cloudify.relationships.contained_in
      - target: openstack_network_router
        type: cloudify.openstack.subnet_connected_to_router
      - target: openstack_controller
        type: cloudify.relationships.connected_to

  vpn_floating_ip:
    type: cloudify.openstack.nodes.FloatingIP
    relationships:
      - target: openstack_controller
        type: cloudify.relationships.connected_to

  def_security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      use_external_resource: True
      security_group:
        description: VCPE security security group
    relationships:
      - target: openstack_controller
        type: cloudify.relationships.connected_to

  openstack_key:
    type: cloudify.openstack.nodes.KeyPair
    properties:
      use_external_resource: { get_input: use_existing_openstack_key }
      resource_id: { get_input: openstack_key }
      private_key_path: { get_input: openstack_key_file }
    relationships:
      - target: openstack_controller
        type: cloudify.relationships.connected_to

#
#  Infra.
#

  generic_vnf:
    type: cloudify.openstack.nodes.Server
    properties:
      server:
        image: { get_input: image_id }
        flavor: { get_input: flavor_id }
      cloudify_agent:
        user: { get_input: agent_user }
    relationships:
      - target: vpn_floating_ip
        type: cloudify.openstack.server_connected_to_floating_ip
      - target: def_security_group
        type: cloudify.openstack.server_connected_to_security_group
      - target: openstack_controller
        type: cloudify.relationships.connected_to
      - target: openstack_key
        type: cloudify.openstack.server_connected_to_keypair

#  filter_vfn:
#    type: cloudify.openstack.nodes.Server
#    properties:
#      server:
#        image: { get_input: image_id }
#        flavor: { get_input: flavor_id }
#     cloudify_agent:
#       user: { get_input: agent_user }
#   relationships:
#     - target: def_security_group
#       type: cloudify.openstack.server_connected_to_security_group
#     - target: openvpn_vfn
#       type: cloudify.openstack.server_connected_to_security_group


#  router_vfn:
#    type: cloudify.openstack.nodes.Server
#    properties:
#      server:
#        image: { get_input: image_id }
#        flavor: { get_input: flavor_id }
#      cloudify_agent:
#        user: { get_input: agent_user }
#    relationships:
#      - target: def_security_group
#        type: cloudify.openstack.server_connected_to_security_group

#
#  Components
#

  tunnel:
    type: labs.networking.sshtunnel
    relationships:
      - target: generic_vnf
        type: cloudify.relationships.contained_in


  vpn:
    type: openvpn.server.openvpnsrv
    relationships:
      - target: generic_vnf
        type: cloudify.relationships.contained_in
      - target: tunnel
        type: cloudify.relationships.connected_to

  filter:
    type: cloudify.nodes.ApplicationModule
    interfaces:
      cloudify.interfaces.lifecycle:
        start:
          implementation: scripts/filter_start.sh
          inputs:
            filter_keyword: { get_input: filter_keyword }
        stop:
          implementation: scripts/filter_stop.sh
          inputs:
            filter_keyword: { get_input: filter_keyword }

    relationships:
      - target: generic_vnf
        type: cloudify.relationships.contained_in



  router:
    type: cloudify.nodes.ApplicationModule
    interfaces:
      cloudify.interfaces.lifecycle:
        start:
          implementation: scripts/router_start.sh
    relationships:
      - target: generic_vnf
        type: cloudify.relationships.contained_in
      - target: vpn
        type: cloudify.relationships.connected_to




